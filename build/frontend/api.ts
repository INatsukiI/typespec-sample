/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Sample
 * OpenAPI spec version: 0.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export type BadRequestErrorCode = typeof BadRequestErrorCode[keyof typeof BadRequestErrorCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BadRequestErrorCode = {
  BAD_REQUEST: 'BAD_REQUEST',
} as const;

export type BadRequestError = Error & {
  code: BadRequestErrorCode;
};

export interface Error {
  code: string;
  message: string;
}

export type InternalServerErrorCode = typeof InternalServerErrorCode[keyof typeof InternalServerErrorCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InternalServerErrorCode = {
  INTERNAL_SERVER_ERROR: 'INTERNAL_SERVER_ERROR',
} as const;

export type InternalServerError = Error & {
  code: InternalServerErrorCode;
};

export type NotFoundErrorCode = typeof NotFoundErrorCode[keyof typeof NotFoundErrorCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotFoundErrorCode = {
  NOT_FOUND: 'NOT_FOUND',
} as const;

export type NotFoundError = Error & {
  code: NotFoundErrorCode;
};

export interface User {
  readonly id: string;
  name: string;
}

export interface UserCreate {
  name: string;
  email: string;
}

export interface UserCreateOrUpdate {
  name: string;
  email: string;
}

export interface UsersResponse {
  users: User[];
}

export type UpdateUser400 = BadRequestError | BadRequestError;

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary „É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÂèñÂæó
 */
export const getUsers = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersResponse>> => {
    
    
    return axios.default.get(
      `/users`,options
    );
  }


export const getGetUsersQueryKey = () => {
    return [`/users`] as const;
    }

    
export const getGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof getUsers>>, TError = AxiosError<InternalServerError>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) => getUsers({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersQueryError = AxiosError<InternalServerError>


/**
 * @summary „É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÂèñÂæó
 */

export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = AxiosError<InternalServerError>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUsersQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „É¶„Éº„Ç∂„Éº‰ΩúÊàê
 */
export const createUser = (
    userCreate: UserCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.post(
      `/users`,
      userCreate,options
    );
  }



export const getCreateUserMutationOptions = <TError = AxiosError<BadRequestError | NotFoundError | InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: UserCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: UserCreate}, TContext> => {

const mutationKey = ['createUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, {data: UserCreate}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
    export type CreateUserMutationBody = UserCreate
    export type CreateUserMutationError = AxiosError<BadRequestError | NotFoundError | InternalServerError>

    /**
 * @summary „É¶„Éº„Ç∂„Éº‰ΩúÊàê
 */
export const useCreateUser = <TError = AxiosError<BadRequestError | NotFoundError | InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: UserCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createUser>>,
        TError,
        {data: UserCreate},
        TContext
      > => {

      const mutationOptions = getCreateUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary „É¶„Éº„Ç∂„ÉºÂèñÂæó
 */
export const getUser = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    
    return axios.default.get(
      `/users/${id}`,options
    );
  }


export const getGetUserQueryKey = (id: string,) => {
    return [`/users/${id}`] as const;
    }

    
export const getGetUserQueryOptions = <TData = Awaited<ReturnType<typeof getUser>>, TError = AxiosError<NotFoundError | InternalServerError>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) => getUser(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserQueryError = AxiosError<NotFoundError | InternalServerError>


/**
 * @summary „É¶„Éº„Ç∂„ÉºÂèñÂæó
 */

export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = AxiosError<NotFoundError | InternalServerError>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary „É¶„Éº„Ç∂„ÉºÊõ¥Êñ∞
 */
export const updateUser = (
    id: string,
    userCreateOrUpdate: UserCreateOrUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    
    return axios.default.put(
      `/users/${id}`,
      userCreateOrUpdate,options
    );
  }



export const getUpdateUserMutationOptions = <TError = AxiosError<UpdateUser400 | NotFoundError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: string;data: UserCreateOrUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: string;data: UserCreateOrUpdate}, TContext> => {

const mutationKey = ['updateUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {id: string;data: UserCreateOrUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUser(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = UserCreateOrUpdate
    export type UpdateUserMutationError = AxiosError<UpdateUser400 | NotFoundError>

    /**
 * @summary „É¶„Éº„Ç∂„ÉºÊõ¥Êñ∞
 */
export const useUpdateUser = <TError = AxiosError<UpdateUser400 | NotFoundError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: string;data: UserCreateOrUpdate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateUser>>,
        TError,
        {id: string;data: UserCreateOrUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary „É¶„Éº„Ç∂„ÉºÂâäÈô§
 */
export const deleteUser = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.delete(
      `/users/${id}`,options
    );
  }



export const getDeleteUserMutationOptions = <TError = AxiosError<NotFoundError | InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteUser(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
    
    export type DeleteUserMutationError = AxiosError<NotFoundError | InternalServerError>

    /**
 * @summary „É¶„Éº„Ç∂„ÉºÂâäÈô§
 */
export const useDeleteUser = <TError = AxiosError<NotFoundError | InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteUser>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
